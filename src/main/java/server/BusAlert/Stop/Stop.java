package server.BusAlert.Stop;

import com.fasterxml.jackson.annotation.JsonIgnore;
import org.springframework.beans.factory.annotation.Autowired;
import server.BusAlert.Rider.Rider;
import server.BusAlert.Route.Route;
import server.BusAlert.Route.RouteService;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

/**
 * The Stop class is the model for the Stop object. The main properties are:
 *
 * Id - Long - This is autogenerated by JPA and is the primary key in the table
 * shortCode - String - readable short code value for the Stop
 * longitude - Float - longitude value of the Stop
 * latitude - Float - latitude value of the Stop
 * route - Route object to which the Stop belongs
 * riders - List of Rider objects associated with the Stop
 */
@Entity
public class Stop {

    /**
     * The Id is the unique, primary key associated with the Route.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long Id;

    /**
     * Readable shortCode provided when Stop is created.
     */
    private String shortCode;

    /**
     * longitude part of the GPS coordinates of the Stop
     */
    private Float longitude;

    /**
     * latitude part of the GPS coordinates of the Stop
     */
    private Float latitude;

    /**
     * Route object to which the Stop belongs
     */
    @ManyToOne
    @JoinColumn(name = "route_id")
    @JsonIgnore
    private Route route;

    private Long routeIdOnly;

    /**
     * a List of Rider objects associated with the Stop
     */
    @OneToMany(mappedBy = "stop")
    private List<Rider> riders = new ArrayList<>();

    public Stop() {
    }

    /**
     * This is the main constructor used by the REST APIs
     * @param shortCode shortCode readable String
     * @param longitude part of GPS coordinates
     * @param latitude part of GPS coordinates
     * @param route associated with the Stop
     */
    public Stop(String shortCode, Float longitude, Float latitude, Route route) {
        this.shortCode = shortCode;
        this.longitude = longitude;
        this.latitude = latitude;
        this.route = route;
        this.routeIdOnly = route.getId();
    }

    public Stop(String shortCode, Float longitude, Float latitude, Long routeIdOnly) {
        this.shortCode = shortCode;
        this.longitude = longitude;
        this.latitude = latitude;
        this.routeIdOnly = routeIdOnly;
        this.route = null;
    }

    public Long getRouteIdOnly() {
        return routeIdOnly;
    }

    public Long getId() {
        return Id;
    }

    public Float getLongitude() {
        return longitude;
    }

    public void setLongitude(Float longitude) {
        this.longitude = longitude;
    }

    public Float getLatitude() {
        return latitude;
    }

    public void setLatitude(Float latitude) {
        this.latitude = latitude;
    }

    public String getShortCode() {
        return shortCode;
    }

    public void setShortCode(String shortCode) {
        this.shortCode = shortCode;
    }


    public void setRoute(Route route) {
        this.route = route;
    }

    public Route getRoute() { return this.route; }

    /**
     * The getRiders method returns the List of Riders associated with a Stop
     * @return List of Rider objects
     */
    public List<Rider> getRiders() {
        return this.riders;
    }

    /**
     * The addRider method adds a Rider to the riders List
     * @param rider object to be added
     */
    public void addRider(Rider rider) {
        this.riders.add(rider);
    }

    /**
     * The deleteRider method deletes a Rider from the riders list
     * @param rider object to be deleted
     */
    public void deleteRider(Rider rider) { this.riders.remove(rider); }

 }
