package server.BusAlert.Route;

import org.hibernate.annotations.GenericGenerator;
import server.BusAlert.Stop.Stop;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

/**
 * The Route class is the model for the Route object. The main properties are:
 *
 * Id - Long - This is autogenerated by JPA and is the primary key in the table
 * shortCode - String - readable short code value for the Route
 * stops - List of Stop - This is a list of Stop objects associated with the Route.
 *                        Using OneToMany the stops is connected to the Stop table.
 */

@Entity
public class Route {

    /**
     * The Id is the unique, primary key associated with the Route.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY, generator="seq")
    @GenericGenerator(name="seq", strategy = "increment")
    private Long Id;

    /**
     * Readable shortCode provided when Route is created.
     */
    private String shortCode;

    /**
     * List of Stop objects associated with the Route which is mapped to a
     * Stop object's route property.
     */
    @OneToMany(mappedBy = "route")
    private List<Stop> stops = new ArrayList<>();

    private Long lastStop;

    public Route() {
    }

    public Long getLastStop() {
        return lastStop;
    }

    public void setLastStop(Long lastStop) {
        this.lastStop = lastStop;
    }

    /**
     * This is the main constructor used by the REST API.
     * @param shortCode - required - shortCode readable String
     */
    public Route(String shortCode) {
        this.shortCode = shortCode;
    }

    public Long getId() {
        return Id;
    }

    public void setId(Long id) {
        Id = id;
    }

    public String getShortCode() {
        return shortCode;
    }

    public void setShortCode(String shortCode) {
        this.shortCode = shortCode;
    }

    public List<Stop> getStops() {
        return stops;
    }

    /**
     * The addStop method adds a Stop to the List of Stop objects associated with a Route.
     * @param stop - Stop object to be added.
     */
    public void addStop(Stop stop) {
        this.stops.add(stop);
    }

    /**
     * The deleteStop method deletes a Stop from the List of Stop objects associate with a Route.
     * @param stop - Stop object to be deleted
     */
    public void deleteStop(Stop stop) { this.stops.remove(stop); }
}
